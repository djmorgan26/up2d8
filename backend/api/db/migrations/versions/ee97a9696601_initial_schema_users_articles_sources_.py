"""Initial schema: users, articles, sources, digests, chat

Revision ID: ee97a9696601
Revises: 
Create Date: 2025-10-23 18:23:37.955416

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ee97a9696601'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('sources',
    sa.Column('id', sa.String(length=100), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('url', sa.Text(), nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('check_interval_hours', sa.Integer(), nullable=True),
    sa.Column('last_checked_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('next_check_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('priority', sa.String(length=20), nullable=True),
    sa.Column('authority_score', sa.Integer(), nullable=True),
    sa.Column('success_count', sa.Integer(), nullable=True),
    sa.Column('failure_count', sa.Integer(), nullable=True),
    sa.Column('last_error', sa.Text(), nullable=True),
    sa.Column('companies', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('industries', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.CheckConstraint("priority IN ('high', 'medium', 'low')", name='check_priority'),
    sa.CheckConstraint('authority_score BETWEEN 0 AND 100', name='check_authority_score'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_sources_next_check', 'sources', ['next_check_at'], unique=False, postgresql_where=sa.text('active = true'))
    op.create_index('idx_sources_type', 'sources', ['type'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('email_verified', sa.Boolean(), nullable=True),
    sa.Column('password_hash', sa.String(length=255), nullable=True),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_login_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('tier', sa.String(length=20), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('stripe_customer_id', sa.String(length=100), nullable=True),
    sa.Column('onboarding_completed', sa.Boolean(), nullable=True),
    sa.Column('referral_code', sa.String(length=50), nullable=True),
    sa.Column('referred_by_user_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.CheckConstraint("status IN ('active', 'paused', 'suspended', 'deleted')", name='check_user_status'),
    sa.CheckConstraint("tier IN ('free', 'pro', 'enterprise')", name='check_user_tier'),
    sa.ForeignKeyConstraint(['referred_by_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('referral_code'),
    sa.UniqueConstraint('stripe_customer_id')
    )
    op.create_index('idx_users_created_at', 'users', [sa.text('created_at DESC')], unique=False)
    op.create_index('idx_users_status', 'users', ['status', 'tier'], unique=False)
    op.create_index('idx_users_tier', 'users', ['tier'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('articles',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('source_id', sa.String(length=100), nullable=False),
    sa.Column('source_url', sa.Text(), nullable=False),
    sa.Column('source_type', sa.String(length=50), nullable=True),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('content_html', sa.Text(), nullable=True),
    sa.Column('summary_micro', sa.String(length=280), nullable=True),
    sa.Column('summary_standard', sa.Text(), nullable=True),
    sa.Column('summary_detailed', sa.Text(), nullable=True),
    sa.Column('author', sa.String(length=255), nullable=True),
    sa.Column('published_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('fetched_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('companies', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('industries', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('technologies', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('people', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('categories', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('impact_score', sa.Integer(), nullable=True),
    sa.Column('quality_score', sa.DECIMAL(precision=3, scale=2), nullable=True),
    sa.Column('engagement_score', sa.Integer(), nullable=True),
    sa.Column('sentiment', sa.String(length=20), nullable=True),
    sa.Column('processing_status', sa.String(length=30), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('content_hash', sa.String(length=64), nullable=True),
    sa.Column('duplicate_of', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('canonical', sa.Boolean(), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('extracted_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.CheckConstraint("processing_status IN ('pending', 'processing', 'completed', 'failed', 'archived')", name='check_processing_status'),
    sa.CheckConstraint("sentiment IN ('positive', 'negative', 'neutral')", name='check_sentiment'),
    sa.CheckConstraint('impact_score BETWEEN 1 AND 10', name='check_impact_score'),
    sa.CheckConstraint('quality_score BETWEEN 0 AND 1', name='check_quality_score'),
    sa.ForeignKeyConstraint(['duplicate_of'], ['articles.id'], ),
    sa.ForeignKeyConstraint(['source_id'], ['sources.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('source_url')
    )
    op.create_index('idx_articles_companies', 'articles', ['companies'], unique=False, postgresql_using='gin')
    op.create_index('idx_articles_content_hash', 'articles', ['content_hash'], unique=False)
    op.create_index('idx_articles_impact', 'articles', [sa.text('impact_score DESC'), sa.text('published_at DESC')], unique=False)
    op.create_index('idx_articles_industries', 'articles', ['industries'], unique=False, postgresql_using='gin')
    op.create_index('idx_articles_published_at', 'articles', [sa.text('published_at DESC')], unique=False)
    op.create_index('idx_articles_source', 'articles', ['source_id', sa.text('fetched_at DESC')], unique=False)
    op.create_index('idx_articles_status', 'articles', ['processing_status'], unique=False)
    op.create_table('chat_sessions',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('context_type', sa.String(length=50), nullable=True),
    sa.Column('context_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_message_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('message_count', sa.Integer(), nullable=True),
    sa.Column('total_tokens_used', sa.Integer(), nullable=True),
    sa.Column('total_cost_usd', sa.DECIMAL(precision=10, scale=4), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.Column('topics', sa.ARRAY(sa.Text()), nullable=True),
    sa.CheckConstraint("status IN ('active', 'archived', 'abandoned')", name='check_session_status'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_chat_sessions_context', 'chat_sessions', ['context_type', 'context_id'], unique=False)
    op.create_index('idx_chat_sessions_user', 'chat_sessions', ['user_id', sa.text('last_message_at DESC')], unique=False)
    op.create_table('digests',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('digest_date', sa.Date(), nullable=False),
    sa.Column('generated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('scheduled_for', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('sent_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('user_preferences_snapshot', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('article_count', sa.Integer(), nullable=True),
    sa.Column('personalized_intro', sa.Text(), nullable=True),
    sa.Column('delivery_status', sa.String(length=30), nullable=True),
    sa.Column('delivery_error', sa.Text(), nullable=True),
    sa.Column('opened_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('first_click_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('total_clicks', sa.Integer(), nullable=True),
    sa.Column('chat_engaged', sa.Boolean(), nullable=True),
    sa.Column('email_subject', sa.String(length=255), nullable=True),
    sa.Column('email_html', sa.Text(), nullable=True),
    sa.Column('email_plaintext', sa.Text(), nullable=True),
    sa.CheckConstraint("delivery_status IN ('pending', 'queued', 'sent', 'delivered', 'bounced', 'failed')", name='check_delivery_status'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_digests_date', 'digests', [sa.text('digest_date DESC')], unique=False)
    op.create_index('idx_digests_scheduled', 'digests', ['scheduled_for'], unique=False, postgresql_where=sa.text("delivery_status = 'pending'"))
    op.create_index('idx_digests_user', 'digests', ['user_id', sa.text('digest_date DESC')], unique=False)
    op.create_index('idx_digests_user_date', 'digests', ['user_id', 'digest_date'], unique=True)
    op.create_table('subscriptions',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('stripe_subscription_id', sa.String(length=100), nullable=True),
    sa.Column('stripe_price_id', sa.String(length=100), nullable=True),
    sa.Column('plan', sa.String(length=50), nullable=False),
    sa.Column('billing_interval', sa.String(length=20), nullable=True),
    sa.Column('price_usd', sa.DECIMAL(precision=10, scale=2), nullable=True),
    sa.Column('currency', sa.String(length=3), nullable=True),
    sa.Column('status', sa.String(length=30), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('current_period_start', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('current_period_end', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('trial_start', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('trial_end', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('canceled_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('ended_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.CheckConstraint("status IN ('active', 'trialing', 'past_due', 'canceled', 'incomplete', 'incomplete_expired', 'paused')", name='check_subscription_status'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('stripe_subscription_id')
    )
    op.create_index('idx_subscriptions_period_end', 'subscriptions', ['current_period_end'], unique=False, postgresql_where=sa.text("status IN ('active', 'trialing')"))
    op.create_index('idx_subscriptions_status', 'subscriptions', ['status'], unique=False)
    op.create_index('idx_subscriptions_user', 'subscriptions', ['user_id'], unique=False)
    op.create_table('user_activity',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('event_type', sa.String(length=100), nullable=False),
    sa.Column('event_category', sa.String(length=50), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('session_id', sa.String(length=100), nullable=True),
    sa.Column('ip_address', postgresql.INET(), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_activity_session', 'user_activity', ['session_id'], unique=False)
    op.create_index('idx_activity_type', 'user_activity', ['event_type', sa.text('created_at DESC')], unique=False)
    op.create_index('idx_activity_user', 'user_activity', ['user_id', sa.text('created_at DESC')], unique=False)
    op.create_table('user_preferences',
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('subscribed_companies', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('subscribed_industries', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('subscribed_technologies', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('subscribed_people', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('digest_frequency', sa.String(length=20), nullable=True),
    sa.Column('delivery_time', sa.Time(), nullable=True),
    sa.Column('timezone', sa.String(length=50), nullable=True),
    sa.Column('delivery_days', sa.ARRAY(sa.Integer()), nullable=True),
    sa.Column('email_format', sa.String(length=20), nullable=True),
    sa.Column('article_count_per_digest', sa.Integer(), nullable=True),
    sa.Column('summary_style', sa.String(length=20), nullable=True),
    sa.Column('notification_preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('content_filters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.CheckConstraint("digest_frequency IN ('daily', 'twice_daily', 'hourly', 'realtime')", name='check_digest_frequency'),
    sa.CheckConstraint("email_format IN ('html', 'plaintext', 'both')", name='check_email_format'),
    sa.CheckConstraint("summary_style IN ('micro', 'standard', 'detailed')", name='check_summary_style'),
    sa.CheckConstraint('article_count_per_digest BETWEEN 3 AND 20', name='check_article_count'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index('idx_user_prefs_delivery_time', 'user_preferences', ['delivery_time', 'timezone'], unique=False)
    op.create_index('idx_user_prefs_frequency', 'user_preferences', ['digest_frequency'], unique=False)
    op.create_table('bookmarks',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('article_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('tags', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['article_id'], ['articles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_bookmarks_article', 'bookmarks', ['article_id'], unique=False)
    op.create_index('idx_bookmarks_unique', 'bookmarks', ['user_id', 'article_id'], unique=True)
    op.create_index('idx_bookmarks_user', 'bookmarks', ['user_id', sa.text('created_at DESC')], unique=False)
    op.create_table('chat_messages',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('session_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('role', sa.String(length=20), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('retrieved_articles', sa.ARRAY(sa.UUID(as_uuid=False)), nullable=True),
    sa.Column('web_search_results', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('tokens_used', sa.Integer(), nullable=True),
    sa.Column('latency_ms', sa.Integer(), nullable=True),
    sa.Column('feedback_score', sa.Integer(), nullable=True),
    sa.Column('feedback_comment', sa.Text(), nullable=True),
    sa.CheckConstraint("role IN ('user', 'assistant', 'system')", name='check_message_role'),
    sa.CheckConstraint('feedback_score IN (1, -1)', name='check_feedback_score'),
    sa.ForeignKeyConstraint(['session_id'], ['chat_sessions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_chat_messages_feedback', 'chat_messages', ['feedback_score'], unique=False, postgresql_where=sa.text('feedback_score IS NOT NULL'))
    op.create_index('idx_chat_messages_session', 'chat_messages', ['session_id', 'created_at'], unique=False)
    op.create_table('digest_items',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('digest_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('article_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('position', sa.Integer(), nullable=False),
    sa.Column('relevance_score', sa.DECIMAL(precision=5, scale=2), nullable=True),
    sa.Column('scoring_factors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('clicked', sa.Boolean(), nullable=True),
    sa.Column('clicked_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('chat_opened', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['article_id'], ['articles.id'], ),
    sa.ForeignKeyConstraint(['digest_id'], ['digests.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_digest_items_article', 'digest_items', ['article_id'], unique=False)
    op.create_index('idx_digest_items_digest', 'digest_items', ['digest_id', 'position'], unique=False)
    op.create_index('idx_digest_items_engagement', 'digest_items', ['digest_id'], unique=False, postgresql_where=sa.text('clicked = true'))
    op.create_index('idx_digest_items_unique', 'digest_items', ['digest_id', 'article_id'], unique=True)
    op.create_table('email_events',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('digest_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('event_type', sa.String(length=30), nullable=False),
    sa.Column('email_address', sa.String(length=255), nullable=True),
    sa.Column('link_url', sa.Text(), nullable=True),
    sa.Column('bounce_type', sa.String(length=20), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('message_id', sa.String(length=255), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.CheckConstraint("event_type IN ('sent', 'delivered', 'opened', 'clicked', 'bounced', 'complained', 'unsubscribed')", name='check_email_event_type'),
    sa.ForeignKeyConstraint(['digest_id'], ['digests.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_email_events_digest', 'email_events', ['digest_id', 'event_type'], unique=False)
    op.create_index('idx_email_events_type', 'email_events', ['event_type', sa.text('created_at DESC')], unique=False)
    op.create_index('idx_email_events_user', 'email_events', ['user_id', 'event_type', sa.text('created_at DESC')], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_email_events_user', table_name='email_events')
    op.drop_index('idx_email_events_type', table_name='email_events')
    op.drop_index('idx_email_events_digest', table_name='email_events')
    op.drop_table('email_events')
    op.drop_index('idx_digest_items_unique', table_name='digest_items')
    op.drop_index('idx_digest_items_engagement', table_name='digest_items', postgresql_where=sa.text('clicked = true'))
    op.drop_index('idx_digest_items_digest', table_name='digest_items')
    op.drop_index('idx_digest_items_article', table_name='digest_items')
    op.drop_table('digest_items')
    op.drop_index('idx_chat_messages_session', table_name='chat_messages')
    op.drop_index('idx_chat_messages_feedback', table_name='chat_messages', postgresql_where=sa.text('feedback_score IS NOT NULL'))
    op.drop_table('chat_messages')
    op.drop_index('idx_bookmarks_user', table_name='bookmarks')
    op.drop_index('idx_bookmarks_unique', table_name='bookmarks')
    op.drop_index('idx_bookmarks_article', table_name='bookmarks')
    op.drop_table('bookmarks')
    op.drop_index('idx_user_prefs_frequency', table_name='user_preferences')
    op.drop_index('idx_user_prefs_delivery_time', table_name='user_preferences')
    op.drop_table('user_preferences')
    op.drop_index('idx_activity_user', table_name='user_activity')
    op.drop_index('idx_activity_type', table_name='user_activity')
    op.drop_index('idx_activity_session', table_name='user_activity')
    op.drop_table('user_activity')
    op.drop_index('idx_subscriptions_user', table_name='subscriptions')
    op.drop_index('idx_subscriptions_status', table_name='subscriptions')
    op.drop_index('idx_subscriptions_period_end', table_name='subscriptions', postgresql_where=sa.text("status IN ('active', 'trialing')"))
    op.drop_table('subscriptions')
    op.drop_index('idx_digests_user_date', table_name='digests')
    op.drop_index('idx_digests_user', table_name='digests')
    op.drop_index('idx_digests_scheduled', table_name='digests', postgresql_where=sa.text("delivery_status = 'pending'"))
    op.drop_index('idx_digests_date', table_name='digests')
    op.drop_table('digests')
    op.drop_index('idx_chat_sessions_user', table_name='chat_sessions')
    op.drop_index('idx_chat_sessions_context', table_name='chat_sessions')
    op.drop_table('chat_sessions')
    op.drop_index('idx_articles_status', table_name='articles')
    op.drop_index('idx_articles_source', table_name='articles')
    op.drop_index('idx_articles_published_at', table_name='articles')
    op.drop_index('idx_articles_industries', table_name='articles', postgresql_using='gin')
    op.drop_index('idx_articles_impact', table_name='articles')
    op.drop_index('idx_articles_content_hash', table_name='articles')
    op.drop_index('idx_articles_companies', table_name='articles', postgresql_using='gin')
    op.drop_table('articles')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index('idx_users_tier', table_name='users')
    op.drop_index('idx_users_status', table_name='users')
    op.drop_index('idx_users_created_at', table_name='users')
    op.drop_table('users')
    op.drop_index('idx_sources_type', table_name='sources')
    op.drop_index('idx_sources_next_check', table_name='sources', postgresql_where=sa.text('active = true'))
    op.drop_table('sources')
    # ### end Alembic commands ###

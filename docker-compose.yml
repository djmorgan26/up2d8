services:
  # MongoDB (FREE - local, simulates Cosmos DB with MongoDB API)
  mongodb:
    image: mongo:7
    container_name: up2d8-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: up2d8
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - up2d8

  # FastAPI Backend Service
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile.local
    container_name: up2d8-api
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./backend:/app
      - ./data:/app/data  # For ChromaDB persistence
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URL=${MONGODB_URL}
      - COSMOS_DB_CONNECTION_STRING=${COSMOS_DB_CONNECTION_STRING}
      - COSMOS_DB_NAME=${COSMOS_DB_NAME}
      - LLM_PROVIDER=${LLM_PROVIDER}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL}
      - EMBEDDING_PROVIDER=${EMBEDDING_PROVIDER}
      - VECTOR_DB_PROVIDER=${VECTOR_DB_PROVIDER}
      - CHROMA_PATH=${CHROMA_PATH}
      - EMAIL_PROVIDER=${EMAIL_PROVIDER}
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - up2d8

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.local
    container_name: up2d8-frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
    depends_on:
      - api
    networks:
      - up2d8

  # Mongo Express (optional - MongoDB management UI)
  mongo-express:
    image: mongo-express:latest
    container_name: up2d8-mongo-express
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
    networks:
      - up2d8
    profiles:
      - tools  # Only start with: docker-compose --profile tools up

volumes:
  mongodb_data:
    driver: local

networks:
  up2d8:
    driver: bridge

# Usage:
#
# Start all services (MongoDB, Backend API, Frontend):
#   docker-compose up -d
#
# Build and start with latest changes:
#   docker-compose up --build -d
#
# Start with management tools (Mongo Express):
#   docker-compose --profile tools up -d
#
# View logs:
#   docker-compose logs -f api
#   docker-compose logs -f frontend
#   docker-compose logs -f mongodb
#
# Stop everything:
#   docker-compose down
#
# Reset database (CAUTION - deletes data):
#   docker-compose down -v
#   docker-compose up -d
#
# Access services:
#   Frontend: http://localhost:5173
#   FastAPI Backend: http://localhost:8000
#   API Docs: http://localhost:8000/docs
#   MongoDB: mongodb://localhost:27017
#   Mongo Express: http://localhost:8081 (with --profile tools)
#
# Note: Background tasks (scraping, processing, digest generation) run via
# APScheduler in the main API process, not separate Celery workers.
